{"version":3,"sources":["App.tsx","use-throttled-effect.ts","hiding.ts","reportWebVitals.ts","index.tsx"],"names":["ResultTabs","useThrottledEffect","callback","delay","deps","lastRan","useRef","Date","now","useEffect","handler","setTimeout","current","clearTimeout","App","useState","hideText","setHideText","Hide","resultTab","setResultTab","textHided","setTextHided","textUnHided","setTextUnHided","text","result","success","window","btoa","unescape","encodeURIComponent","textToBase64","decodeURIComponent","escape","atob","base64ToText","className","value","onChange","e","target","onClick","UnHide","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAMKA,E,qFCcUC,EAlBY,SAACC,EAAoBC,GAAqC,IAAtBC,EAAqB,uDAAP,GACrEC,EAAUC,iBAAOC,KAAKC,OAE5BC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACrBJ,KAAKC,MAAQH,EAAQO,SAAWT,IAClCD,IACAG,EAAQO,QAAUL,KAAKC,SAExBL,GAASI,KAAKC,MAAQH,EAAQO,UAEjC,OAAO,WACLC,aAAaH,MATR,CAYLP,GAZK,mBAYKC,O,SDXXJ,O,eAAAA,I,oBAAAA,M,KAsEUc,MAjEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAASf,EAAWkB,MAFzC,mBAENC,EAFM,KAEKC,EAFL,OAGqBL,mBAAS,IAH9B,mBAGNM,EAHM,KAGKC,EAHL,OAIyBP,mBAAS,IAJlC,mBAINQ,EAJM,KAIOC,EAJP,KAmBb,OAbAvB,GACE,WAEIqB,EEpBoB,SAACG,GAC3B,IAAIC,EAAS,GACXC,GAAU,EACZ,IACED,EAASE,OAAOC,KAAKC,SAASC,mBAAmBN,KACjDE,GAAU,EAFZ,QAIE,MAAO,CAACA,EAASD,IFaAM,CAAahB,GAAU,IACpCQ,EEVoB,SAACC,GAC3B,IAAIC,EAAS,GACXC,GAAU,EACZ,IACED,EAASO,mBAAmBC,OAAON,OAAOO,KAAKV,KAC/CE,GAAU,EAFZ,QAIE,MAAO,CAACA,EAASD,IFGEU,CAAapB,GAAU,MAK1C,IACA,CAACA,IAID,sBAAKqB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAf,gCACA,qBAAKA,UAAU,aAAf,+FAEF,sBAAKA,UAAU,sBAAf,UACE,oDACA,0BAAUC,MAAOtB,EAAUuB,SAAU,SAACC,GAAD,OAAOvB,EAAYuB,EAAEC,OAAOH,aAGnE,sBAAKD,UAAU,eAAf,UACE,wBACEA,UAAWlB,IAAcnB,EAAWkB,KAAO,aAAe,MAC1DwB,QAAS,kBAAMtB,EAAapB,EAAWkB,OAFzC,wBAMA,wBACEmB,UAAWlB,IAAcnB,EAAW2C,OAAS,aAAe,MAC5DD,QAAS,kBAAMtB,EAAapB,EAAW2C,SAFzC,4BAODxB,IAAcnB,EAAWkB,MACxB,sBAAKmB,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BhB,IAC9B,cAAC,IAAD,CAAiBI,KAAMJ,EAAvB,SACE,wBAAQgB,UAAU,YAAlB,uBAILlB,IAAcnB,EAAW2C,QACxB,sBAAKN,UAAU,YAAf,UACE,qBAAKA,UAAU,cAAf,SAA8Bd,IAC9B,cAAC,IAAD,CAAiBE,KAAMF,EAAvB,SACE,wBAAQc,UAAU,YAAlB,uBAIN,qBAAKA,UAAU,SAAf,+CGzDSO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d82ff148.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport \"./App.css\";\nimport { base64ToText, textToBase64 } from \"./hiding\";\nimport useThrottledEffect from \"./use-throttled-effect\";\n\nenum ResultTabs {\n  Hide,\n  UnHide,\n}\n\nfunction App() {\n  const [hideText, setHideText] = useState(\"\");\n  const [resultTab, setResultTab] = useState(ResultTabs.Hide);\n  const [textHided, setTextHided] = useState(\"\");\n  const [textUnHided, setTextUnHided] = useState(\"\");\n\n  useThrottledEffect(\n    () => {\n      const handleHideText = () => {\n        setTextHided(textToBase64(hideText)[1]);\n        setTextUnHided(base64ToText(hideText)[1]);\n      };\n\n      handleHideText();\n    },\n    500,\n    [hideText]\n  );\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <div className=\"header_main\">Simple Text Hiding</div>\n        <div className=\"header_sub\">Sometimes, you want to hide some sensitive text. Here is a simple way to do it</div>\n      </div>\n      <div className=\"input_box container\">\n        <label>Enter text here</label>\n        <textarea value={hideText} onChange={(e) => setHideText(e.target.value)} />\n      </div>\n\n      <div className=\"tab_selector\">\n        <button\n          className={resultTab === ResultTabs.Hide ? \"active btn\" : \"btn\"}\n          onClick={() => setResultTab(ResultTabs.Hide)}\n        >\n          Hiden Text\n        </button>\n        <button\n          className={resultTab === ResultTabs.UnHide ? \"active btn\" : \"btn\"}\n          onClick={() => setResultTab(ResultTabs.UnHide)}\n        >\n          Unhide Text\n        </button>\n      </div>\n      {resultTab === ResultTabs.Hide && (\n        <div className=\"container\">\n          <div className=\"text_result\">{textHided}</div>\n          <CopyToClipboard text={textHided}>\n            <button className=\"btn btn_2\">Copy</button>\n          </CopyToClipboard>\n        </div>\n      )}\n      {resultTab === ResultTabs.UnHide && (\n        <div className=\"container\">\n          <div className=\"text_result\">{textUnHided}</div>\n          <CopyToClipboard text={textUnHided}>\n            <button className=\"btn btn_2\">Copy</button>\n          </CopyToClipboard>\n        </div>\n      )}\n      <div className=\"footer\">Made by Quang Son with ‚ù§</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nconst useThrottledEffect = (callback: Function, delay: number, deps: any[] = []) => {\n  const lastRan = useRef(Date.now());\n\n  useEffect(() => {\n    const handler = setTimeout(function () {\n      if (Date.now() - lastRan.current >= delay) {\n        callback();\n        lastRan.current = Date.now();\n      }\n    }, delay - (Date.now() - lastRan.current));\n\n    return () => {\n      clearTimeout(handler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, ...deps]);\n};\n\nexport default useThrottledEffect;\n","export const textToBase64 = (text: string): [boolean, string] => {\n  let result = \"\",\n    success = false;\n  try {\n    result = window.btoa(unescape(encodeURIComponent(text)));\n    success = true;\n  } finally {\n    return [success, result];\n  }\n};\n\nexport const base64ToText = (text: string): [boolean, string] => {\n  let result = \"\",\n    success = false;\n  try {\n    result = decodeURIComponent(escape(window.atob(text)));\n    success = true;\n  } finally {\n    return [success, result];\n  }\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}